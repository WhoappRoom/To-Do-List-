const http = require("http");
const path = require("path");

function Nova() {
    const routes = [];
    let styles = "";

    // Create HTTP server
    const server = http.createServer((req, res) => {
        // Handle matching routes
        let matchedRoute = null;
        for (const route of routes) {
            if (req.method === route.method && req.url === route.path) {
                matchedRoute = route;
                break;
            }
        }

        if (matchedRoute) {
            const content = matchedRoute.handler(req, res);
            res.writeHead(200, { "Content-Type": "text/html" });
            res.end(`${styles}${content}`);
        } else {
            res.writeHead(404, { "Content-Type": "text/html" });
            res.end("<h1>Page Not Found</h1>");
        }
    });

    Object.defineProperty(server, "style", {
        set(value) {
            styles = `<style>${value}</style>`;
        },
        get() {
            return styles;
        },
    });

    // Handle GET Routes
    server.get = function (path, handler) {
        routes.push({ method: "GET", path, handler });
    };

    // Handle POST Routes
    server.post = function (path, handler) {
        routes.push({ method: "POST", path, handler });
    };

    // Handle PUT Routes
    server.put = function (path, handler) {
        routes.push({ method: "PUT", path, handler });
    };

    // Handle DELETE Routes
    server.delete = function (path, handler) {
        routes.push({ method: "DELETE", path, handler });
    };

    // Middleware (using the basic Node.js way)
    server.useMiddleware = function (middleware) {
        routes.push({ middleware });
    };

    // Serve Static Files
    server.serveStatic = function (dir) {
        server.useMiddleware((req, res, next) => {
            const resolvedPath = path.resolve(dir, req.url.slice(1));
            res.sendFile = function (filePath) {
                res.sendFile(resolvedPath);
            };
            next();
        });
    };

    // Custom Error Handler
    server.error = function (handler) {
        server.useMiddleware((err, req, res, next) => {
            handler(err, req, res, next);
        });
    };

    // Send File Method (manually handled in HTTP)
    server.sendFile = function (filePath, res) {
        const resolvedPath = path.resolve(filePath);
        res.writeHead(200, { "Content-Type": "text/html" });
        res.end(resolvedPath);
    };

    server.at = function (port, callback) {
        server.listen(port, callback);
    };

    return server;
}

module.exports = Nova;
